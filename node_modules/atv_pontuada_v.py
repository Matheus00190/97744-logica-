import time

employees_data = []

def register_employee(employee_id, name, position, salary):
    """
    Registra um novo funcionário no sistema de RH.

    Args:
        employee_id (str): O ID único do funcionário.
        name (str): O nome completo do funcionário.
        position (str): O cargo do funcionário.
        salary (float): O salário do funcionário.
    """
    # Verifica se o ID do funcionário já existe
    for employee in employees_data:
        if employee['id'] == employee_id:
            print(f"Erro: Funcionário com ID '{employee_id}' já existe.")
            time.sleep(1) # Small delay after an error
            return

    employee = {
        "id": employee_id,
        "name": name,
        "position": position,
        "salary": salary
    }
    employees_data.append(employee)
    print(f"Funcionário '{name}' (ID: {employee_id}) registrado com sucesso.")
    time.sleep(1.5) # Delay after successful registration

def list_all_employees():
    """
    Lista todos os funcionários registrados no sistema de RH.
    """
    if not employees_data:
        print("Nenhum funcionário registrado ainda.")
        time.sleep(1) # Delay when no employees are found
        return

    print("\n--- Todos os Funcionários Registrados ---")
    time.sleep(0.5) # Short delay before listing
    for employee in employees_data:
        print(f"ID: {employee['id']}")
        print(f"  Nome: {employee['name']}")
        print(f"  Cargo: {employee['position']}")
        print(f"  Salário: R${employee['salary']:.2f}")
        print("-" * 30) # Linha separadora para melhor legibilidade
        time.sleep(0.3) # Small delay between each employee's details
    print("-----------------------------------------\n")
    time.sleep(1) # Delay after listing all employees

def update_employee_salary(employee_id, new_salary):
    """
    Atualiza o salário de um funcionário existente pelo seu ID.

    Args:
        employee_id (str): O ID do funcionário cujo salário será atualizado.
        new_salary (float): O novo salário do funcionário.
    """
    found = False
    for employee in employees_data:
        if employee['id'] == employee_id:
            employee['salary'] = new_salary
            print(f"Salário do funcionário ID '{employee_id}' atualizado para R${new_salary:.2f}.")
            found = True
            time.sleep(1.5) # Delay after successful update
            break
    if not found:
        print(f"Erro: Funcionário com ID '{employee_id}' não encontrado.")
        time.sleep(1) # Delay after an error

def search_employee_by_id(employee_id):
    """
    Busca e exibe os detalhes de um funcionário específico pelo seu ID.

    Args:
        employee_id (str): O ID do funcionário a ser buscado.

    Returns:
        dict or None: O dicionário do funcionário se encontrado, caso contrário, None.
    """
    for employee in employees_data:
        if employee['id'] == employee_id:
            print("\n--- Detalhes do Funcionário ---")
            time.sleep(0.5) # Short delay before displaying details
            print(f"ID: {employee['id']}")
            print(f"  Nome: {employee['name']}")
            print(f"  Cargo: {employee['position']}")
            print(f"  Salário: R${employee['salary']:.2f}")
            print("-------------------------------\n")
            time.sleep(1) # Delay after displaying details
            return employee
    print(f"Funcionário com ID '{employee_id}' não encontrado.")
    time.sleep(1) # Delay when employee is not found
    return None